factor(ph.ecog) , data = lung,
alpha_0 = 501, omega_0 = 500, mu_0 = c(6.7, 0, 0, 0, 0, 0), v_0 = 1, threshold = 0.01)
fit2 <- survregVB(formula = Surv(time, status == 2) ~ age + factor(sex) +
factor(ph.ecog), data = lung, alpha_0 = 501, omega_0 = 500,
mu_0 = c(6.7, 0, 0, 0, 0, 0), v_0 = 1, threshold = 0.01)
print(fit2)
source("~/survregVB/inst/lung_survival.R", echo=TRUE)
vb <- survregVB(formula = Surv(time, status == 2) ~ age + factor(sex) +
factor(ph.ecog), data = lung, alpha_0 = 501, omega_0 = 500,
mu_0 = c(6.7, 0, 0, 0, 0, 0), v_0 = 1, threshold = 0.01)
source("~/survregVB/inst/lung_survival.R", echo=TRUE)
print(M3, pars = c("beta", "sigma"), digits = 3, probs = c(0.025, 0.975))
source("~/survregVB/inst/lung_survival.R", echo=TRUE)
print(M3, pars = c("beta", "sigma"), digits = 3, probs = c(0.025, 0.975))
time
summary(vb)
time2
summary(surv)
confint(surv)
scale_se <- summary(mysurvreg)$table[nrow(summary(mysurvreg)$table), 2]  # Last row contains scale SE
scale_se
scale_estimate <- summary(mysurvreg)$scale
scale_se <- summary(surv)$table[nrow(summary(surv)$table), 2]  # Last row contains scale SE
scale_se
scale_estimate <- summary(surv)$scale
# Compute 95% confidence interval for scale
scale_lower <- scale_estimate - 1.96 * scale_se
scale_upper <- scale_estimate + 1.96 * scale_se
# Print confidence interval
cat("95% CI for scale: (", scale_lower, ",", scale_upper, ")\n")
survregVB(formula = Surv(time, status) ~ factor(gender) + Stage + factor(smoking), alpha_0 = 11, omega_0 = 10, mu_0 = c(6.8, 0, 0, 0, 0, 0), v_0 = 1, threshold = 0.01)
survregVB(formula = Surv(time, status) ~ factor(gender) + Stage + factor(smoking), data = lung_cancer, alpha_0 = 11, omega_0 = 10, mu_0 = c(6.8, 0, 0, 0, 0, 0), v_0 = 1, threshold = 0.01)
survregVB(formula = Surv(time, status) ~ age + Stage + factor(gender) + factor(smoking), data = lung_cancer, alpha_0 = 11, omega_0 = 10, mu_0 = c(6.8, 0, 0, 0, 0, 0), v_0 = 1, threshold = 0.01)
source("~/survregVB/inst/lung_cancer.R", echo=TRUE)
Y <- lung_cancer$time
n <- nrow(lung_cancer)
delta <- lung_cancer$status
# Convert categorical variables to factors
lung_cancer$gender <- factor(lung_cancer$gender)
lung_cancer$Stage <- factor(lung_cancer$Stage)
lung_cancer$smoking <- factor(lung_cancer$smoking)
# Create the model matrix (dummy encoding for Stage)
X <- model.matrix(~ age + Stage + gender + smoking, data = lung_cancer)
N <- nrow(X)
M <- ncol(X)
real_data = list(y = Y, event = delta, x = X, N = N, M = M)
real_data
ncol(X)
source("~/survregVB/inst/lung_cancer.R", echo=TRUE)
source("~/survregVB/inst/lung_cancer.R", echo=TRUE)
source("~/survregVB/inst/lung_survival.R", echo=TRUE)
X <- model.matrix(~ age + Stage + gender + smoking, data = lung_cancer)
View(X)
View(lung_cancer)
Y <- lung_cancer$time
n <- nrow(lung_cancer)
delta <- lung_cancer$status
# Convert categorical variables to factors
lung_cancer$gender <- factor(lung_cancer$gender)
lung_cancer$Stage <- factor(lung_cancer$Stage)
lung_cancer$smoking <- factor(lung_cancer$smoking)
# Create the model matrix (dummy encoding for Stage)
X <- model.matrix(~ age + Stage + gender + smoking, data = lung_cancer)
N <- nrow(X)
M <- ncol(X)
real_data = list(y = Y, event = delta, x = X, N = N, M = M)
real_data
source("~/survregVB/inst/lung_cancer.R", echo=TRUE)
source("~/survregVB/inst/lung_cancer.R", echo=TRUE)
library(devtools)
library(survregVB)
?lung_cancer
load_all()
?lung_cancer
Y <- lung_cancer$time
n <- nrow(lung_cancer)
delta <- lung_cancer$status
# Create the model matrix (dummy encoding for Stage)
X <- model.matrix(~ age + Stage + gender + smoking, data = lung_cancer)
N <- nrow(X)
M <- ncol(X)
real_data = list(y = Y, event = delta, x = X, N = N, M = M)
Y <- lung_cancer$time
n <- nrow(lung_cancer)
delta <- lung_cancer$status
# Create the model matrix (dummy encoding for Stage)
X <- model.matrix(~ age + Stage + gender + factor(smoking), data = lung_cancer)
N <- nrow(X)
M <- ncol(X)
real_data = list(y = Y, event = delta, x = X, N = N, M = M)
real_data
length(Y)
length(delta)
nrow(X)
N
M
ncol(X
)
source("~/survregVB/inst/lung_cancer.R", echo=TRUE)
source("~/survregVB/inst/lung_cancer.R", echo=TRUE)
start <- Sys.time()
vb1 <- survregVB(formula = Surv(time, status) ~ age + Stage + gender + factor(smoking),
data = lung_cancer, alpha_0 = 11, omega_0 = 10, mu_0 = c(6.8, 0, 0, 0, 0, 0),
v_0 = 1, threshold = 0.01)
end <- Sys.time()
time2 <- end - start
surv1 <- survreg(formula = Surv(time, stats) ~ age + Stage + gender + factor(smoking),
data = lung_cancer, dist = "loglogistic")
surv1 <- survreg(formula = Surv(time, status) ~ age + Stage + gender + factor(smoking),
data = lung_cancer, dist = "loglogistic")
time
print(M3, pars = c("beta", "sigma"), digits = 3, probs = c(0.025, 0.975))
summary(vb1)
time2
summary(srv1)
summary(surv1)
scale_se <- summary(surv1)$table[nrow(summary(surv1)$table), 2]  # Last row contains scale SE
scale_estimate <- summary(surv1)$scale
# Compute 95% confidence interval for scale
scale_lower <- scale_estimate - 1.96 * scale_se
scale_upper <- scale_estimate + 1.96 * scale_se
# Print confidence interval
cat("95% CI for scale: (", scale_lower, ",", scale_upper, ")\n")
scale_se
confint(surv1)
?survreg
?survregVB
use_r('survregVB')
load_all()
survregVB
?survregVB
res
?res
myres <- survregVB(formula = Surv(time, status) ~ age + Stage + gender + factor(smoking), data = lung_cancer, alpha_0 = 11, omega_0 = 10, mu_0 = c(6.8, 0, 0, 0, 0, 0), v_0 = 1, threshold = 0.01)
print(myres)
summary(myres)
?dnase
R CMD check --as-cran
devtools::check(cran = TRUE)
devtools::check(cran = TRUE)
library(devtools)
pkgbuild::check_build_tools(debug = TRUE)
check(cran = TRUE)
check(cran = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
check(cran = TRUE)
R CMD SHLIB foo.c
check(cran = TRUE)
library(devtools)
check(cran = TRUE)
result <- survregVB(Surv(time, infect) ~ trt + fev, dnase,
501, 500, c(4.4, 0.25, 0.04), 1,
max_iteration = 100, threshold = 0.0005
)
library(survival)
result <- survregVB(Surv(time, infect) ~ trt + fev, dnase,
501, 500, c(4.4, 0.25, 0.04), 1,
max_iteration = 100, threshold = 0.0005
)
summary(result)
summary(result)$posteriors
result2 <- suppressWarnings(
survregVB(Surv(time, infect) ~ trt + fev, dnase,
501, 500, c(4.4, 0.25, 0.04), 1,
max_iteration = 8, threshold = 0.0005
)
)
summary(result2)$posteriors
summary(result2)$posteriors
capture_output(print(summary(result, digits = 4))
)
capture_output()
print(summary(result, digits = 4)))
print(summary(result, digits = 4))
capture_output(print(summary(result, digits = 4)))
library(devtools)
capture_output(print(summary(result, digits = 4)))
capture_output(print(summary(result, digits = 4)))
capture.output(print(summary(result, digits = 4)))
check(cran = TRUE)
?survreg
fit <- survregVB(
formula = Surv(time, infect) ~ trt + fev, data = dnase,
alpha_0 = 501, omega_0 = 500, mu_0 = c(4.4, 0.25, 0.04), v_0 = 1,
max_iteration = 10000, threshold = 0.0005, na.action = na.omit
)
print(fit)
print(fit) summary(fit)
source("~/.active-rstudio-document", echo=TRUE)
fit <- survregVB(fit_frailty <- survregVB(
formula = Surv(T.15, delta.15) ~ x1 + x2, data = simulation_frailty,
alpha_0 = 3, omega_0 = 2, mu_0 = c(0, 0, 0), v_0 = 0.1,
lambda_0 = 3, eta_0 = 2, cluster = cluster,
max_iteration = 100, threshold = 0.01
)
summary(fit2)
summary(fitfit_frailty <- survregVB(
formula = Surv(T.15, delta.15) ~ x1 + x2, data = simulation_frailty,
alpha_0 = 3, omega_0 = 2, mu_0 = c(0, 0, 0), v_0 = 0.1,
lambda_0 = 3, eta_0 = 2, cluster = cluster,
max_iteration = 100, threshold = 0.01
)
)
fit_frailty <- survregVB(
formula = Surv(T.15, delta.15) ~ x1 + x2, data = simulation_frailty,
alpha_0 = 3, omega_0 = 2, mu_0 = c(0, 0, 0), v_0 = 0.1,
lambda_0 = 3, eta_0 = 2, cluster = cluster,
max_iteration = 100, threshold = 0.01
)
summary(fit_frailty)
load_all()
library(devtools)
load_all()
?survregVB
?survregVB.fit
?survregVB.frailty.fit
library(survvial)
library(survival)
fit <- survregVB(
formula = Surv(time, infect) ~ trt + fev,
data = dnase,
alpha_0 = 501,
omega_0 = 500,
mu_0 = c(4.4, 0.25, 0.04),
v_0 = 1,
max_iteration = 10000,
threshold = 0.0005,
na.action = na.omit
)
summary(fit)
?survregVB
fit <- survregVB(
formula = Surv(time, infect) ~ trt + fev, data = dnase,
alpha_0 = 501, omega_0 = 500, mu_0 = c(4.4, 0.25, 0.04), v_0 = 1,
max_iteration = 10000, threshold = 0.0005, na.action = na.omit
)
summary(fit)
print(fit)
?lung
View(fit)
summary(fit)
summary(fit)$posteriors
summary(fit)
printCoefmat(summary(fit)$posteriors,
digits = digits, signif.stars = signif.stars,
P.values = TRUE, has.Pvalue = TRUE
)
digits = 3
printCoefmat(summary(fit)$posteriors,
digits = digits, signif.stars = signif.stars,
P.values = TRUE, has.Pvalue = TRUE
)
signif.stars = FALSE
printCoefmat(summary(fit)$posteriors,
digits = digits, signif.stars = signif.stars,
P.values = TRUE, has.Pvalue = TRUE
)
printCoefmat(summary(fit)$posteriors,
digits = 4, signif.stars = signif.stars,
P.values = TRUE, has.Pvalue = TRUE
)
printCoefmat(summary(fit)$posteriors,
digits = 3, signif.stars = signif.stars,
P.values = TRUE, has.Pvalue = TRUE
)
summary(fit)
survreg(formula=Surv(time,infect)~trt+fev,data=dnase,dist="loglogistic")
fit2 <- survreg(formula=Surv(time,infect)~trt+fev,data=dnase,dist="loglogistic")
summary(fit2)
fit2$var
?print.coefmat
?printCoefmat
?signif.stars
summary(fit, digits=4)
summary(fit)
print(summary(fit), digits=4)
printCoefmat(fit$posteriors,
digits = digits, signif.stars = signif.stars,
P.values = TRUE, has.Pvalue = TRUE
)
printCoefmat(summary(fit)$posteriors,
digits = 4, signif.stars = FALSE,
P.values = TRUE, has.Pvalue = TRUE
)
printCoefmat(summary(fit)$posteriors,
digits = 3, signif.stars = FALSE,
P.values = TRUE, has.Pvalue = TRUE
)
load_all()
printCoefmat(summary(fit)$posteriors,
digits = 3, signif.stars = FALSE,
P.values = TRUE, has.Pvalue = TRUE
)
summary(fit)
load_all()
fit_frailty <- survregVB(
formula = Surv(T.15, delta.15) ~ x1 + x2,
data = simulation_frailty,
alpha_0 = 3,
omega_0 = 2,
mu_0 = c(0, 0, 0),
v_0 = 0.1,
lambda_0 = 3,
eta_0 = 2,
cluster = cluster,
max_iteration = 100,
threshold = 0.01
)
print(fit_frailty)
summary(fit_frailty)
printCoefmat(summary(fit)$posteriors,
digits = 3, signif.stars = FALSE,
P.values = TRUE, has.Pvalue = TRUE
)fit_frailty <- survregVB(
fit_frailty <- survregVB(
formula = Surv(T.15, delta.15) ~ x1 + x2,
data = simulation_frailty,
alpha_0 = 3,
omega_0 = 2,
mu_0 = c(0, 0, 0),
v_0 = 0.1,
lambda_0 = 3,
eta_0 = 2,
cluster = cluster,
max_iteration = 100,
threshold = 0.01
)
print(fit_frailty)
summary(fit_frailty)
summary(fit_frailty)
summary(fit_frailty, 3)
summary(fit_frailty)
summary(fit_frailty, 0.8)
?rhDNase
?rhDNASE
?lung_cancer
library("GEOquery")
# Get the GSE object
gse <- getGEO("GSE102287", GSEMatrix = FALSE)
# Get the GSM list
gsmlist <- GSMList(gse)
# Initialize the dataframe
df <- data.frame()
df2 <- data.frame()
# Loop through each item in gsmlist
for (i in seq_along(gsmlist)) {
mygsm <- gsmlist[[i]] # Get the current sample from the list
# Extract characteristics of each sample
data <- Meta(mygsm)$characteristics_ch1
series_id <- Meta(mygsm)$series_id
# Convert the data into a dictionary
dict <- setNames(
sapply(data, function(x) strsplit(x, ": ")[[1]][2]), # Extract the value
sapply(data, function(x) strsplit(x, ": ")[[1]][1]) # Extract the key
)
# Convert the dictionary to a row
new_row <- as.data.frame(t(dict), stringsAsFactors = FALSE)
# Add the new row to the dataframe
if (series_id[1] == "GSE101929") {
# mRNA data
df <- rbind(df, new_row)
} else {
# miRNA data
df2 <- rbind(df2, new_row)
}
}
?df
View(df)
?lung
source("~/survregVB/data-raw/simulation_frailty.R", echo=TRUE)
load_all()
check()
cen.time.15 <- runif(75, 0, 48)
source("~/survregVB/data-raw/simulation_frailty.R", echo=TRUE)
source("~/survregVB/data-raw/simulation_nofrailty.R", echo=TRUE)
check()
check()
check()
# to test if null values are omitted
simulation_frailty <- rbind(simulation_frailty, NA)
cluster <- simulation_frailty$cluster
x1 <- simulation_frailty$x1
x2 <- simulation_frailty$x2
Y <- Surv(simulation_frailty$Time, simulation_frailty$delta)
result_frailty <- survregVB(
formula = Y ~ x1 + x2, alpha_0 = 3, omega_0 = 2,
mu_0 = c(0, 0, 0), v_0 = 0.1,
lambda_0 = 3, eta_0 = 2, cluster = cluster,
max_iteration = 100, threshold = 0.01, na.action = na.omit
)
capture_output(print(summary(result_frailty)))
capture_output(print(summary(result_frailty)), 4)
result <- survregVB(Surv(time, infect) ~ trt + fev, dnase,
501, 500, c(4.4, 0.25, 0.04), 1,
max_iteration = 100, threshold = 0.0005
)
result2 <- suppressWarnings(
survregVB(Surv(time, infect) ~ trt + fev, dnase,
501, 500, c(4.4, 0.25, 0.04), 1,
max_iteration = 8, threshold = 0.0005
)
)
# to test if null values are omitted
simulation_frailty <- rbind(simulation_frailty, NA)
cluster <- simulation_frailty$cluster
x1 <- simulation_frailty$x1
x2 <- simulation_frailty$x2
Y <- Surv(simulation_frailty$Time, simulation_frailty$delta)
result_frailty <- survregVB(
formula = Y ~ x1 + x2, alpha_0 = 3, omega_0 = 2,
mu_0 = c(0, 0, 0), v_0 = 0.1,
lambda_0 = 3, eta_0 = 2, cluster = cluster,
max_iteration = 100, threshold = 0.01, na.action = na.omit
)
capture_output(print(summary(result, digits = 4)))
print(suppressWarnings(summary(result2))))
print(suppressWarnings(summary(result2)))
capture_output(print(suppressWarnings(summary(result2))))
check()
check()
check()
library(survival)
?lung
?survregVB
load_all()
library(devtools)
load_all()
?survregVB
library(devtools)
load_all()
check()
build()
usethis::use_news_md()
usethis::use_cran_comments()
check()
check()
devtools::check(remote = TRUE, manual = TRUE)
check(env_vars=c(NOT_CRAN="false"))
use_github_action()
check()
?survregVB
check()
?survregVB
?survregVB.fit
use_r('survregVB.fit.R')
check()
check()
check()
check()
check()
check()
load_all()
check()
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE, cache = FALSE)
library(survregVB)
library(survival)
fit <- survregVB(
formula = Surv(time, infect) ~ trt + fev,
data = dnase,
alpha_0 = 501,
omega_0 = 500,
mu_0 = c(4.4, 0.25, 0.04),
v_0 = 1,
max_iteration = 10000,
threshold = 0.0005,
na.action = na.omit
)
print(fit)
summary(fit)
fit_frailty <- survregVB(
formula = Surv(Time.15, delta.15) ~ x1 + x2,
data = simulation_frailty,
alpha_0 = 3,
omega_0 = 2,
mu_0 = c(0, 0, 0),
v_0 = 0.1,
lambda_0 = 3,
eta_0 = 2,
cluster = cluster,
max_iteration = 100,
threshold = 0.01
)
print(fit_frailty)
summary(fit_frailty)
load_all()
fit_frailty <- survregVB(
formula = Surv(Time.15, delta.15) ~ x1 + x2,
data = simulation_frailty,
alpha_0 = 3,
omega_0 = 2,
mu_0 = c(0, 0, 0),
v_0 = 0.1,
lambda_0 = 3,
eta_0 = 2,
cluster = cluster,
max_iteration = 100,
threshold = 0.01
)
print(fit_frailty)
summary(fit_frailty)
check()
?summary.survregVB
check()
?summary.survregVB
check()
library(devtools)
load_all()
?summary.survregVB.R
check()
?summary.survregVB.R
?summary.survregVB
