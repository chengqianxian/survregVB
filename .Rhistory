scale_sd <- alpha^2 / ((alpha - 1)^2 * (alpha - 2))
scald_sd
scale_sd
alpha
sqrt((omega^2) / ((alpha - 1)^2 * (alpha - 2)))
alpha <- result$alpha
omega <- result$omega
scale_sd <- sqrt((omega^2) / ((alpha - 1)^2 * (alpha - 2)))
scale <- c(expectation_b(alpha, omega), scale_sd, b_ci(alpha, omega))
scale
?survreg
result2 <- survreg(Surv(time, infect) ~ trt + fev, dnase, dist = "loglogistic", cluster = inst)
result2
summary(result2)
result2$icoef
load_all()
summary(result)
load_all()
summary(result)
use_r('print.survregVB.R')
use_r('print.summary.survregVB.R')
summary(result2)
load_all()
summary(result)
load_all()
beta_ci(result$mu,result$Sigma)
load_all()
beta_ci(result$mu,result$Sigma)
load_all()
beta_ci(result$mu,result$Sigma)
ci = 0.95
ci_label <- paste0(100 * ci, "% Cred. Int")
ci_label
formatted_intervals <- apply(beta_ci, 1, function(row) {
sprintf("[%.3f, %.3f]", row[1], row[2])
})
beta_ci
beta_ci <- beta_ci(result$mu, result$Sigma, ci=0.95)
beta_ci
formatted_intervals <- apply(beta_ci, 1, function(row) {
sprintf("[%.3f, %.3f]", row[1], row[2])
})
formatted_intervals
coefficients <- matrix(rep(result$mu, 3), ncol = 3)
coefficients
coefficients[,3] <- formatted_intervals
coefficients
load_all()
summary(result)
b_ci <- b_ci(alpha, omega, ci)
b_ci
b_ci[1]
scale <- c(expectation_b(alpha, omega), scale_sd,
paste0("[", b_ci[1], ", ", b_ci[2], "]"))
scale
load_all()
summary(result)
load_all()
summary(result)
object <- result
object
mu <- object$mu
coefficients <- matrix(rep(mu, 3), ncol = 3)
coefficients
coefficients[, 2] <- sqrt(diag(object$Sigma))
coefficients
beta_ci <- beta_ci(mu, object$Sigma, ci)
ci_intervals <- apply(beta_ci, 1, function(row) {
paste0("[", row[1], ", ", row[2], "]")
})
coefficients[, 3] <-  ci_intervals
coefficients
alpha <- object$alpha
omega <- object$omega
scale_sd <- sqrt((omega^2) / ((alpha - 1)^2 * (alpha - 2)))
b_ci <- b_ci(alpha, omega, ci)
scale <- c(expectation_b(alpha, omega), scale_sd,
paste0("[", b_ci[1], ", ", b_ci[2], "]"))
scale
posteriors = rbind(coefficients, scale)
ci_label <- paste0(100 * ci, "% Cred. Int")
cname <- c(names(mu), 'scale')
dimnames(posteriors) <- list(cname, c("Value", "SD", ci_label))
posteriors
printCoefmat(posteriors, digits = digits, signif.stars = signif.stars,
P.values = TRUE, has.Pvalue = TRUE)
mu <- object$mu
coefficients <- matrix(rep(mu, 4), ncol = 4)
coefficients
coefficients[, 2] <- sqrt(diag(object$Sigma))
beta_ci <- beta_ci(mu, object$Sigma, ci)
coefficients[, 3] <-  beta_ci[1]
coefficients[, 4] <-  beta_ci[2]
coefficients
beta_ci <- beta_ci(mu, object$Sigma, ci)
beta_ci
beta_ci[1]
beta_ci[, 1]
coefficients[, 3] <-  beta_ci[, 1]
coefficients[, 4] <-  beta_ci[, 2]
coefficients
alpha <- object$alpha
omega <- object$omega
scale_sd <- sqrt((omega^2) / ((alpha - 1)^2 * (alpha - 2)))
scale <- c(expectation_b(alpha, omega), scale_sd, b_ci(alpha, omega, ci))
scale
posteriors = rbind(coefficients, scale)
ci_label <- paste0(100 * ci, "% Cred. Int")
cname <- c(names(mu), 'scale')
dimnames(posteriors) <- list(cname, c("Value", "SD", ci_label))
ci_label <- paste0(100 * ci, "% Cred. Int")
ci_label
ci_label <- ci_label + "Upper"
paste(ci_label, "Upper")
ci_label <- paste0(100 * ci, "% CI")
ci_label
dimnames(posteriors) <- list(cname, c("Value", "SD", paste(ci_label, "Upper"), paste(ci_label, "Lower")))
posteriors
ci_label <- paste0(100 * ci, "% CI")
col_names <- c("Value", "SD", paste(ci_label, c("Upper", "Lower")))
row_names <- c(names(mu), "scale")
dimnames(posteriors) <- list(row_names, col_names)
dimnames
posteriors
load_all()
summary(object)
summary(result2)
load_all()
summary(object)
library(survival)
cluster <- rep(1:15, each = 5)
set.seed(1)
x1 <- rnorm(75, 1, 0.2)
x2 <- rbinom(75, 1, 0.5)
epsilon <- rlogis(75)
cen.time.15 <- runif(75, 0, 48)
beta0 <- 0.5
beta1 <- 0.2
beta2 <- 0.8
b <- 0.8
Y <- numeric(50)
random.int <- rnorm(15, 0, 1)
for (l in 1:75){
Y[l] <- beta0 + beta1 * x1[l] + beta2 * x2[l] + random.int[(l-1) %/% 5 + 1] + b * epsilon[l]
}
T <- exp(Y)
# obtain observed time
T.15 <- pmin(T, cen.time.15)
# obtain censoring indicator
delta <- rep(1, 75)
delta.15 <- ifelse(T == T.15, 1, 0)
# prepare for the data structure
X <- matrix(0, nrow = 75, ncol = 3)
X[, 1] <- 1
X[, 2] <- x1
X[, 3] <- x2
# priors, informative priors
mu_0 <- c(0, 0, 0)
v_0 <- 0.1
alpha_0 <- 3
omega_0 <- 2
lambda_0 <- 3
eta_0 <- 2
result <- survregVB.frailty.fit(Y = Surv(T, delta), X = X, alpha_0 = alpha_0,
omega_0 = omega_0, mu_0 = mu_0, v_0 = v_0,
lambda_0 = lambda_0, eta_0 = eta_0,
cluster = cluster, max_iteration = 100,
threshold = 0.01)
result
result$mu
load_all()
result
summary(result)
result
model
summary(model)
result <- survregVB(Surv(time, infect) ~ trt + fev, dnase,
501, 500, c(4.4, 0.25, 0.04), 1,
max_iteration = 100, threshold = 0.0005)
class(result)
result
summary(result)
result2
result
use_r('print.survregVB.frailty.R')
?survreg.object
result2$coefficients
result2$icoef
result2$var
load_all()
load_all()
result
summary(result)
?survregVB.object
?survregVB.fit
?survregVB.frailty.fit
?survregVB
devtools::document()
?survregVB
devtools::document()
?survregVB
devtools::document()
?survregVB
devtools::document()
pkgload::dev_help('survregVB.object')
devtools::document()
pkgload::dev_help('survregVB.object')
devtools::document()
pkgload::dev_help('survregVB.object')
devtools::document()
pkgload::dev_help('survregVB.object')
devtools::document()
pkgload::dev_help('survregVB.object')
?survregVB.fit
load_all()
devtools::document()
pkgload::dev_help('survregVB.fit')
devtools::document()
pkgload::dev_help('survregVB.frailty.fit')
devtools::document()
pkgload::dev_help('elbo_cluster')
devtools::document()
pkgload::dev_help('elbo_cluster')
pkgload::dev_help('elbo_cluster')
devtools::document()
pkgload::dev_help('elbo_cluster')
devtools::document()
pkgload::dev_help('elbo_cluster')
pkgload::dev_help('survregVB')
devtools::document()
pkgload::dev_help('survregVB')
devtools::document()
pkgload::dev_help('survregVB')
devtools::document()
pkgload::dev_help('survregVB.object')
?elbo_cluster
devtools::document()
pkgload::dev_help('survregVB.object')
devtools::document()
pkgload::dev_help('elbo_cluster')
devtools::document()
pkgload::dev_help('elbo_cluster')
devtools::document()
pkgload::dev_help('elbo')
pkgload::dev_help('elbo_cluster')
devtools::document()
pkgload::dev_help('elbo')
devtools::document()
pkgload::dev_help('elbo')
?survregVB
devtools::document()
pkgload::dev_help('survregVB')
devtools::document()
pkgload::dev_help('survregVB')
pkgload::dev_help('alpha_star')
pkgload::dev_help('omega_star')
devtools::document()
pkgload::dev_help('eta_star')
pkgload::dev_help('tau_star')
devtools::document()
pkgload::dev_help('eta_star')
devtools::document()
pkgload::dev_help('elbo_cluster')
?summary.survreg
?summary.survreg.object
result
survregVB(formula = Surv(time, infect) ~ trt + fev, data = dnase,
alpha_0 = 501, omega_0 = 500, mu_0 = c(4.4, 0.25, 0.04),
v_0 = 1, max_iteration = 100, threshold = 5e-04, cluster = inst)
survregVB(formula = Surv(time, infect) ~ trt + fev, data = dnase,
alpha_0 = 501, omega_0 = 500, mu_0 = c(4.4, 0.25, 0.04),
v_0 = 1, max_iteration = 100, threshold = 5e-04, cluster = inst, lambda_0 = 501, eta_0 = 500)
load_all()
load_all()
model1 <- survregVB(formula = Surv(time, infect) ~ trt + fev, data = dnase,
alpha_0 = 501, omega_0 = 500, mu_0 = c(4.4, 0.25, 0.04),
v_0 = 1, max_iteration = 100, threshold = 5e-04, cluster = inst, lambda_0 = 501, eta_0 = 500)
model1 <- survregVB(formula = Surv(time, infect) ~ trt + fev, data = dnase,
alpha_0 = 501, omega_0 = 500, mu_0 = c(4.4, 0.25, 0.04),
v_0 = 1, max_iteration = 10, threshold = 5e-04, cluster = inst, lambda_0 = 501, eta_0 = 500)
model1
devtools::document()
model1
print(model1)
print.survregVB.frailty(model1)
load_all()
devtools::document()
print.survregVB.frailty(model1)
model1
use_r('summary.survregVB.frailty.R')
result
summary(result)
load_all()
summary(model1)
model1
devtools::document()
pkgload::dev_help('survregVB.frailty.fit')
devtools::document()
summary(model1)
class9model1
class(model1)
summary(model1)
devtools::document()
devtools::document()
summary(model1)
load_all()
summary(model1)
load_all()
summary(model1)
model1$mu
model1$mu[1,]
model1$mu[2]
model1$mu[2,]
model1$mu[-1]
load_all()
summary(model1)
model1$Sigma
load_all()
model1$Sigma
summary(model1)
use_r('print.survregVB.frailty.R')
use_r('print.summmary.survregVB.frailty.R')
load_all()
model1 <- survregVB(formula = Surv(time, infect) ~ trt + fev, data = dnase,
alpha_0 = 501, omega_0 = 500, mu_0 = c(4.4, 0.25, 0.04),
v_0 = 1, max_iteration = 10, threshold = 5e-04, cluster = inst, lambda_0 = 501, eta_0 = 500)
model1
load_all()
summary(model1)
result
summary(result)
devtools::document()
devtools::document()
usethis::use_tidy_style()
check()
result <- beta_ci(mu, Sigma, ci)
result
mu <- c(1.5, 2.0)
Sigma <- matrix(c(0.5, 0.1, 0.1, 0.3), nrow = 2)
ci <- 0.95
result <- beta_ci(mu, Sigma, ci)
result
mu <- c(0.8, 1.3, 2.5)
Sigma <- matrix(
c(
0.2, 0.05, 0.1,
0.05, 0.15, 0.2,
0.1, 0.2, 0.25
),
nrow = 3, byrow = TRUE
)
ci <- 0.01
alpha <- 500
omega <- 501
ci <- 0.01
result <- b_ci(alpha, omega, ci)
result
check()
git status
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(aft.size.300.cen.0)
source("~/Desktop/CS4490/vbaft_original/Update_equations.R", echo=TRUE)
source("~/survregVB/R/parameters.R", echo=TRUE)
library(devtools)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
View(aft.size.300.cen.0)
View(aft.size.300.cen.0)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
Y
y <- log(Y[, 1])
delta <- Y[, 2]
n <- nrow(X)
alpha <- alpha_star(alpha_0, delta)
omega <- omega_0
mu <- mu_0
converged <- FALSE
iteration <- 0
expectation_b <- expectation_b(alpha, omega)
curr_mu <- mu_0
curr_elbo <- 0
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
z_i
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/survregVB/R/piecewise_coefficients.R", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
load_all()
load_all()
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
load_all()
load_all()
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/survregVB/R/parameters.R", echo=TRUE)
load_all()
rm(list = c("alpha_star", "eta_star", "lambda_star", "mu_star", "mu_star_cluster", "omega_star",
"omega_star_cluster", "sigma_squared_star", "Sigma_star", "Sigma_star_cluster", "tau_star"))
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
Sigma
source("~/.active-rstudio-document", echo=TRUE)
load_all()
source("~/.active-rstudio-document", echo=TRUE)
install.packages("styler")
library(styler)
# Style a single file
styler::style_file("R/my_function.R")
# Style the entire package
styler::style_pkg()
install.packages("lintr")
library(lintr)
# Lint a file
lintr::lint("R/my_function.R")
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
styler::style_pkg()
lintr::lint_package()
library(survival)
cluster <- rep(1:15, each = 5)
set.seed(1)
x1 <- rnorm(75, 1, 0.2)
x2 <- rbinom(75, 1, 0.5)
epsilon <- rlogis(75)
cen.time.15 <- runif(75, 0, 48)
beta0 <- 0.5
beta1 <- 0.2
beta2 <- 0.8
b <- 0.8
Y <- numeric(50)
random.int <- rnorm(15, 0, 1)
for (l in 1:75) {
Y[l] <- beta0 + beta1 * x1[l] + beta2 * x2[l] + random.int[(l - 1) %/% 5 + 1] + b * epsilon[l]
}
T <- exp(Y)
# obtain observed time
T.15 <- pmin(T, cen.time.15)
# obtain censoring indicator
delta <- rep(1, 75)
delta.15 <- ifelse(T == T.15, 1, 0)
# prepare for the data structure
X <- matrix(0, nrow = 75, ncol = 3)
X[, 1] <- 1
X[, 2] <- x1
X[, 3] <- x2
# priors, informative priors
mu_0 <- c(0, 0, 0)
v_0 <- 0.1
alpha_0 <- 3
omega_0 <- 2
lambda_0 <- 3
eta_0 <- 2
result <- survregVB.frailty.fit(
Y = Surv(T, delta), X = X, alpha_0 = alpha_0,
omega_0 = omega_0, mu_0 = mu_0, v_0 = v_0,
lambda_0 = lambda_0, eta_0 = eta_0,
cluster = cluster, max_iteration = 100,
threshold = 0.01
)
load_all()
library(devtools)
load_all()
result <- survregVB.frailty.fit(
Y = Surv(T, delta), X = X, alpha_0 = alpha_0,
omega_0 = omega_0, mu_0 = mu_0, v_0 = v_0,
lambda_0 = lambda_0, eta_0 = eta_0,
cluster = cluster, max_iteration = 100,
threshold = 0.01
)
use_r('survregVB.frailty.fit.R')
expectation_b(alpha_0, omega_0)
omega / (alpha - 1)
