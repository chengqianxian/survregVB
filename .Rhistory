class(eset$samples[1])
samplesNames(eset)
samplesNames(eset)
sampleNames(eset)
gse=getGEO(filename="~/Downloads/GSE101929_family.soft.gz")
gsmplatforms <- lapply(GSMList(gse),function(x) {Meta(x)$platform_id})
gsmlist = Filter(function(gsm) {Meta(gsm)$platform_id=='GPL570'},GSMList(gse))
Table(gsmlist[[1]])[1:5,]
gsmlist
gsmlist[[1]]
gsmlist[[1]]$characteristics_ch1
gsmlist = Filter(function(gsm) {Meta(gsm)$platform_id=='GPL570'},GSMList(gse))
gsm[[1]]
gsmlist[[1]]$characteristics_ch1
mygsm <- gmslist[[1]]
gsmlist = Filter(function(gsm) {Meta(gsm)$platform_id=='GPL570'},GSMList(gse))
mygsm = gsmlist[[1]]
mygsm[1:4]
mygsm
mygsm$characteristics_ch1
gse=getGEO(filename="~/Downloads/GSE101929_family.soft.gz", GSEMatrix = TRUE)
mygsm <- GSMList(gse)[[1]]
gsmlist <- GSMList(gse)
gsmlist[[1]]
gsmlist[[1]]$characteristics_ch1
mygsm <- GSMList(gse)[[1]]
mygsm
gse=getGEO(filename="~/Downloads/GSE101929_family.soft.gz")
gsmlist <- GSMList(gse)
gsmlist[[1]]
gse
names(GSMList(gse))
GSMList(gse)[[1]]
mygsm <- GSMList(gse)[[1]]
head(Meta(mygsm))
Meta(mygsm)
Meta(mygsm)$characteristics_ch1
type(Meta(mygsm)$characteristics_ch1)
Meta(mygsm)$characteristics_ch1[1]
Meta(mygsm)$characteristics_ch1[2]
gsmlist <- GSMList(gse)
mygsm <- gsmlist[[1]]
metadata <- Meta(mygsm)
characteristics <- Meta(mygsm)$characteristics_ch1
characteristics
length(characteristics)
length(gsmlist)
type(gsmlist)
?rep
gsmlist <- GSMList(gse)
mylist <- list()
for (i in 1:length(gsmlist)) {
mygsm <- gsmlist[[i]]
characteristics <- Meta(mygsm)$characteristics_ch1
mylist[i] <- characteristics
}
mylist
mylist[1]
mylist[[1]]
mygsm <- gsmlist[[1]]
mygsm
Meta(mygsm)$characteristics_ch1
info <- Meta(mygsm)$characteristics_ch1
info
df <- data.frame(info)
df
View(df)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
items(gsmlist)
mygsm <- gsmlist[1]
mygsm
Show(mygsm)
view(mygsm)
View(mygsm)
mygsm <- gsmlist[[1]]
?GeoDatatable
Metadata(mygsm)
Meta(mygsm)
Meta(mygsm)$characteristics_ch1
data <- Meta(mygsm)$characteristics_ch1
dict <- setNames(
sapply(data, function(x) strsplit(x, ": ")[[1]][2]),
sapply(data, function(x) strsplit(x, ": ")[[1]][1])
)
dict
df <- as.data.frame(t(dict), stringsAsFactors = FALSE)
df
source("~/.active-rstudio-document", echo=TRUE)
head(df)
view(df)
View(df)
library(Geoquery)
library("GEOquery")
df[1]
subset_df <- df[, c[2, 5, 8, 11]]
subset_df <- df[, c(2, 5, 8, 11)]
subset_df
head(subset_df)
?lung
library(survival)
?df
?lung
lung <- df[, c(2, 5, 8, 11)]
lung$Status <- ifelse(lung$Status == "alive", 0, 1)
head(lung)
colnames(lung) <- c("age","stage", "time", "status")
lung
head(lung)
lung$status <- ifelse(lung$status == "alive", 0, 1)
head(lung)
library(devtools)
library(survival)
source("~/.active-rstudio-document", echo=TRUE)
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "log-logistic")
head(lung)
lung$time <- as.numeric(lung$time)
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "log-logistic")
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "loglogistic")
summary(survfit)
lung$age <- as.numeric(lung$age)
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "loglogistic")
summary(survfit)
load_all()
survfitVB <- survregVB(Surv(time, status)~age+stage, data=lung, alpha_0=500, omega_0=501, mu_0=c(0,0,0,0), v_0=1)
survfitVB <- survregVB(Surv(time, status)~age+stage, data=lung, alpha_0=500, omega_0=501, mu_0=c(0,0,0,0), v_0=1, max_iteration = 1000, threshold = 0.0005)
survfitVB <- survregVB(Surv(time, status)~age+stage, data=lung, alpha_0=500, omega_0=501, mu_0=c(0,0,0,0), v_0=1, max_iteration = 10000, threshold = 0.0005)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
my.N <- nrow(my.rhDNase)
time <- my.rhDNase$time
status <- my.rhDNase$infect
X <- matrix(c(rep(1, N), my.rhDNase$trt, my.rhDNase$fev), nrow = N)
K <- ncol(X)
stan_data <- list(
N = N,
time = time,
status = status,
X = X,
K = K
)
fit <- stan(model_code = stan_model_code, data = stan_data, iter = 2000, chains = 4)
N <- nrow(my.rhDNase)
time <- my.rhDNase$time
status <- my.rhDNase$infect
X <- matrix(c(my.rhDNase$trt, my.rhDNase$fev), nrow = N)
K <- ncol(X)
stan_data <- list(
N = N,
time = time,
status = status,
X = X,
K = K
)
fit <- stan(model_code = stan_model_code, data = stan_data, iter = 2000, chains = 4)
head(lung)
lung$status
head(df)
lung <- df[, c(2, 5, 8, 11)]
colnames(lung) <- c("age","stage", "time", "status")
lung$age <- as.numeric(lung$age)
lung$time <- as.numeric(lung$time)
lung$status <- ifelse(lung$status == "Alive", 0, 1)
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "log-logistic")
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "loglogistic")
summary(survfit)
survfitVB <- survregVB(Surv(time, status)~age+stage, data=lung, alpha_0=500, omega_0=501, mu_0=c(0,0,0,0), v_0=1, max_iteration = 1000, threshold = 0.0005)
summary(survfitVB)
head(lung)
view(lung)
View(lung)
mean(lung$age)
lung$stage
range(lung$age)
gse=getGEO(filename="~/Downloads/GSE102287_family.soft.gz")
gsmlist <- GSMList(gse)
mygsm <- gsmlist[[1]]
data <- Meta(mygsm)
View(data)
vie(df)
view(df)
Viwe(df)
View(df)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
head(df)
View(df)
df.loc[df['rrace'] == 'AA']
df[df['race']=='AA']
subset(df, age=='AA')
newdf <- subset(df, age=='AA')
newdf
View(newdf)
View9df
View(df)
# Initialize the dataframe
df <- data.frame()
# Loop through each item in gsmlist
for (i in 1:length(gsmlist)) {
mygsm <- gsmlist[[i]]  # Get the current sample from the list
# Extract characteristics of each sample
data <- Meta(mygsm)$characteristics_ch1
# Convert the data into a dictionary
dict <- setNames(
sapply(data, function(x) strsplit(x, ": ")[[1]][2]),  # Extract the value
sapply(data, function(x) strsplit(x, ": ")[[1]][1])   # Extract the key
)
# Convert the dictionary to a row
new_row <- as.data.frame(t(dict), stringsAsFactors = FALSE)
# Add the new row to the dataframe
df <- rbind(df, new_row)
}
View(df)
cancer <- df[df$race == 'AA',]
View(cancer)
cancer <- df[df$race == 'AA',c(2, 5, 8, 11)]
View(cancer)
cancer <- df[df$race == 'AA',c(2, 5, 8, 11)]
colnames(cancer) <- c("age","stage", "time", "status")
cancer$age <- as.numeric(cancer$age)
cancer$time <- as.numeric(cancer$time)
cancer$status <- ifelse(cancer$status == "Alive", 0, 1)
head(cancer)
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "loglogistic")
summary(survfit)
View(cancer)
?rhdnase
?dnase
?rhDNase
?lung
View(lung)
lung <- data(cancer, package="survival")
View(lung)
View(df)
View(cancer)
cancer <- df[df$race == 'AA',c(2, 5, 8, 11)]
colnames(cancer) <- c("age","stage", "time", "status")
cancer$age <- as.numeric(cancer$age)
cancer$time <- as.numeric(cancer$time)
View(cancer)
cancer$status <- ifelse(cancer$status == "Alive", 0, 1)
?rhDNase
cancer <- df[df$race == 'AA',c(2, 5, 8, 11)]
colnames(cancer) <- c("age","stage", "time", "status")
cancer$age <- as.numeric(cancer$age)
cancer$time <- as.numeric(cancer$time)
cancer$status <- ifelse(cancer$status == "Alive",1,0)
survfit <- survreg(Surv(time, status)~age+stage, data = lung, dist = "loglogistic")
survfit <- survreg(Surv(time, status)~age+stage, data = cancer, dist = "loglogistic")
summary(survfit)
cancer <- df[df$race == 'AA',c(2, 5, 8, 11)]
colnames(cancer) <- c("age","stage", "time", "status")
cancer$age <- as.numeric(cancer$age)
cancer$time <- as.numeric(cancer$time)
cancer$status <- ifelse(cancer$status == "Alive", 1, 0)
max(cancer$time)
survfit <- survreg(Surv(time, status, type='right')~age+stage, data = cancer, dist = "loglogistic")
summary(survfit)
survfitVB <- survregVB(Surv(time, status)~age+stage, data=cancer, alpha_0 = 500,
omega_0 = 501, mu_0 = c(8.09229, -0.00195, 0.01271, -0.20208, -1.26786), v_0 = 1)
survfitVB <- survregVB(Surv(time, status)~age+stage, data=cancer, alpha_0 = 500,
omega_0 = 501, mu_0 = c(8.09229, -0.00195, 0.01271, -0.20208), v_0 = 1)
summary(survfitVB)
survfit <- survreg(Surv(time, status)~age+stage, data = cancer, dist = "loglogistic")
summary(survfit)
surv.cancer = survfit(Surv(time, status)~1, data=cancer)
?survfit
?survfit.formula
data("cancer")
library(survival)
data("cancer")
view("cancer")
View("caner")
View("cancer")
View(cancer)
View(df)
count(df$gender)
?count
?counts
counts(df$gender)
summary(df)
summary(df$gender)
df$gender.value_counts()
df['gender'].value_counts()
df['gender'].value_counts()
df.groupby('gender').size()
df['gender'].value_counts()
length(df[df['gender']=='male'])
length(df[df['gender']=='male' & df['race'] == 'AA'])
length(df['race']=='AA')
mydf <- df[df['race']=='AA']
length(mydf[mydf['gender']=='female'])
mydf
head(mydf)
View(mydf)
df.groupby('gender').count()
View(cancer)
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes/ELBO_calculation_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes/Main_model_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes/A simulation example.R", echo=TRUE)
?exp
# A simulation example
## K = 15
# n = 5, in total there are 75 observations
# generate cluster index
cluster_index <- rep(1:15, each = 5)
# generate true survival times
set.seed(1)
x1 <- rnorm(75, 1, 0.2)
x2 <- rbinom(75, 1, 0.5)
epsilon <- rlogis(75)
cen.time.15 <- runif(75, 0, 48)
beta0 <- 0.5
beta1 <- 0.2
beta2 <- 0.8
b <- 0.8
Y <- numeric(50)
random.int <- rnorm(15, 0, 1)
for (l in 1:75){
Y[l] <- beta0 + beta1 * x1[l] + beta2 * x2[l] + random.int[(l-1) %/% 5 + 1] + b * epsilon[l]
}
T <- exp(Y)
# obtain observed time
T.15 <- pmin(T, cen.time.15)
# obtain censoring indicator
delta.15 <- ifelse(T == T.15, 1, 0)
# prepare for the data structure
X <- matrix(0, nrow = 75, ncol = 3)
X[, 1] <- 1
X[, 2] <- x1
X[, 3] <- x2
# priors, informative priors
mu_0 <- c(0, 0, 0)
v_0 <- 0.1
alpha_0 <- 3
omega_0 <- 2
lambda_0 <- 3
eta_0 <- 2
n <- nrow(X)
p <- ncol(X)
K <- length(unique(cluster_index))
alpha <- alpha_0 + sum(delta) # fixed always
delta <- delta.15
Y <- log(T.15)
n <- nrow(X)
p <- ncol(X)
K <- length(unique(cluster_index))
alpha <- alpha_0 + sum(delta) # fixed always
lambda <- lambda_0 + K / 2 # fixed always
# initialization
Curr_omega <- omega_0
mu <- mu_0
tau <- rep(0, K)
Curr_eta <- eta_0
converged <- FALSE
iteration <- 0
Curr_b <- Curr_omega / (alpha_0 - 1)
curr_elbo <- 0
Curr_Sigma <- Mod_1_get_Sigma_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
Y
delta
alpha
lambda
Curr_Sigma
source("~/survregVB/R/update_equations.R", echo=TRUE)
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_Sigma <- Mod_1_get_Sigma_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
ta
tau
head(X)
head(X)
head(y)
head(Y)
v_0
Curr_b
View(Curr_Sigma)
Curr_mu <- Mod_1_get_mu_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0, mu_0, Curr_Sigma)
Curr_mu
Curr_sigma <- Mod_1_get_sigma_star(X, Y, Curr_b, Curr_mu, tau, alpha, Curr_omega, lambda, Curr_eta, delta, cluster_index)
Curr_sigma
Curr_mu
ta
tau
Curr_b
alpha
omega
Curr_omega
lambda
Curr_tau <- Mod_1_get_tau_star(X, Y, Curr_b, Curr_mu, tau, alpha, Curr_omega, Curr_sigma, delta, cluster_index)
Curr_tau
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
Curr_mu
Curr_mu
Curr_tau
omega_0
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
get_omega_star(Curr_b, omega_0, delta, Y, X, Curr_mu)
Sigma
Curr_Sigma
Curr_mu
Curr_sigma
Curr_tau
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_omega <- Mod_1_get_omega_star(X, Y, Curr_b, Curr_mu, Curr_tau, delta, cluster_index, omega_0)
Curr_omega
Curr_eta <- Mod_1_get_eta_star(Curr_sigma, Curr_tau, eta_0)
Curr_eta
lbo <- Mod_1_vb.aft.get.elbo(Y, X, delta, mu_0, v_0, alpha_0, omega_0, lambda_0, eta_0, Curr_mu, Curr_Sigma, Curr_tau, Curr_sigma, Curr_b, alpha, Curr_omega, lambda, Curr_eta, cluster_index)
lbo
mu <- Curr_mu
tau <- Curr_tau
Curr_b <- Curr_omega / (alpha - 1)
Curr_Sigma <- Mod_1_get_Sigma_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
mu
tau
Curr_b
Curr_omega
Curr_Sigma
source("~/Downloads/Paper 3 codes/Update_equations_randon_intercept.R", echo=TRUE)
Curr_Sigma <- Mod_1_get_Sigma_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
mu
tau
alpha
Curr_omega
Curr_b
Curr_mu <- Mod_1_get_mu_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0, mu_0, Curr_Sigma)
Curr_mu
source("~/Downloads/Paper 3 codes/A simulation example.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/Update_equations_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/ELBO_calculation_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/Main_model_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/A simulation example.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/A simulation example.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/ELBO_calculation_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/Main_model_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/Update_equations_randon_intercept.R", echo=TRUE)
source("~/Downloads/Paper 3 codes 2/A simulation example.R", echo=TRUE)
VBAFT2 <- Mod_1_vb_aft_final(log(T), X, delta, cluster_index,
mu_0, v_0, alpha_0, omega_0, lambda_0, eta_0,
max_iteration = 100, threshold = 0.01)
source("~/Downloads/Paper 3 codes 2/A simulation example.R", echo=TRUE)
VBAFT2
VBAFT
VBAFT2 <- Mod_1_vb_aft_final(log(T), X, delta, cluster_index,
mu_0, v_0, alpha_0, omega_0, lambda_0, eta_0,
max_iteration = 100, threshold = 0.01)
VBAFT2
source("~/.active-rstudio-document", echo=TRUE)
VBAFT2
source("~/.active-rstudio-document", echo=TRUE)
VBAFT2
source("~/Downloads/Paper 3 codes 2/A simulation example.R", echo=TRUE)
VBAFT2
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
n <- nrow(X)
p <- ncol(X)
K <- length(unique(cluster_index))
alpha <- alpha_0 + sum(delta)
alpha
lambda <- lambda_0 + K / 2
lambda
Curr_omega <- omega_0
mu <- mu_0
tau <- rep(0, K)
Curr_eta <- eta_0
Curr_b <- Curr_omega / (alpha_0 - 1)
Curr_b
Curr_Sigma <- Mod_1_get_Sigma_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
Y
Curr_Sigma <- Mod_1_get_Sigma_star(X, Y, Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
Curr_Sigma <- Mod_1_get_Sigma_star(X, log(T), Curr_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
source("~/.active-rstudio-document", echo=TRUE)
Curr_Sigma <- Mod_1_get_Sigma_star(X, Y, expectation_b, mu, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Curr_Sigma
Mod_1_get_Sigma_star(X, Y, expectation_b, mu_0, tau, alpha, Curr_omega, delta, cluster_index, v_0)
Mod_1_get_Sigma_star(X, Y, expectation_b, mu_0, tau_0, alpha, Curr_omega, delta, cluster_index, v_0)
source("~/.active-rstudio-document", echo=TRUE)
Mod_1_get_Sigma_star(X, Y, expectation_b, mu_0, tau_0, alpha, Curr_omega, delta, cluster_index, v_0)
devtools::install()
